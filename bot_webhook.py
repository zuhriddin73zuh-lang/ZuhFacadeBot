
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        logger.info(f"üì® Received: {message.text}")
        chat_id = message.chat.id
        
        if 'uz' in message.text:
            lang = 'uz'
        else:
            lang = 'ru'
            
        logger.info(f"üåê Language: {lang} for chat {chat_id}")
        
        user_data[chat_id] = {'lang': lang, 'step': 0, 'answers': []}
        bot.send_message(chat_id, QUESTIONS[lang][0])
        logger.info(f"‚úÖ First question sent to {chat_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")

# üî• –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    try:
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏–∞–ª–æ–≥
        if chat_id not in user_data:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        user = user_data[chat_id]
        lang = user['lang']
        step = user['step']
        answers = user['answers']
        
        logger.info(f"üí¨ Processing step {step} for chat {chat_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers.append(message.text)
        user['step'] += 1
        
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if user['step'] < len(QUESTIONS[lang]):
            bot.send_message(chat_id, QUESTIONS[lang][user['step']])
        else:
            # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
            send_application(answers, lang, chat_id)
            bot.send_message(chat_id, THANK_YOU[lang])
            del user_data[chat_id]
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_all_messages: {e}")

def send_application(answers, lang, chat_id):
    try:
        name, address, phone, square, comment = answers
        
        if lang == 'ru':
            text = f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\nüë§ –ò–º—è: {name}\nüè† –ê–¥—Ä–µ—Å: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìê –ö–≤–∞–¥—Ä–∞—Ç—É—Ä–∞: {square}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        else:
            text = f"üìã Yangi ariza\n\nüë§ Ism: {name}\nüè† Manzil: {address}\nüìû Telefon: {phone}\nüìê Maydon: {square}\nüí¨ Izoh: {comment}"
        
        bot.send_message(GROUP_ID, text)
        logger.info(f"üì§ Application sent to group {GROUP_ID}")
        
    except Exception as e:
        logger.error(f"‚ùå Error sending application: {e}")

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return 'OK'
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return 'Error', 500

@app.route('/')
def home():
    return '‚úÖ Bot is running!'

if __name__ == '__main__':
    logger.info("üöÄ Starting Flask server...")
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

