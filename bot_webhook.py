# -*- coding: utf-8 -*-
import os
import time
import json
import logging
from datetime import datetime
from typing import Optional

import telebot
from telebot import types
from flask import Flask, request, abort

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger(__name__)

# -------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render) --------
TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_ID_RAW = os.getenv("GROUP_ID")  # –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é -100...
STORAGE_FILE = os.getenv("APPLICATIONS_FILE", "applications.json")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

if not TOKEN:
    log.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")
    raise SystemExit(1)

if not GROUP_ID_RAW:
    log.error("GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GROUP_ID.")
    raise SystemExit(1)

try:
    GROUP_ID = int(GROUP_ID_RAW)
except ValueError:
    log.error("GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890). –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %s", GROUP_ID_RAW)
    raise SystemExit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -------- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ --------
user_state = {}   # chat_id -> {"lang": "ru"/"uz", "step": int}
user_data = {}    # chat_id -> list of answers (index order)

# -------- –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã --------
QUESTIONS = {
    "ru": [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º/–∫–≤):",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        "–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤? (–ø—Ä–∏–º–µ—Ä: 120 –∏–ª–∏ 120.5):",
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):"
    ],
    "uz": [
        "Assalomu alaykum! Iltimos, ismingizni kiriting:",
        "Manzilingizni yozing (ko'cha, uy/xona):",
        "Telefon raqamingiz (majburiy):",
        "Necha kvadrat? (masalan: 120 yoki 120.5):",
        "Izohni qoldiring (matn yoki rasm):"
    ]
}

THANK_YOU = {
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º—ã –≤–∞–º —Å–∫–æ—Ä–æ –ø–æ–∑–≤–æ–Ω–∏–º.",
    "uz": "‚úÖ Rahmat! So'rovingiz qabul qilindi, tez orada sizga qo'ng'iroq qilamiz."
}

# -------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ (—Ñ–∞–π–ª) --------
def load_applications():
    try:
        if os.path.exists(STORAGE_FILE):
            with open(STORAGE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è storage file: %s", e)
        return {}

def save_applications(data):
    try:
        with open(STORAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ storage file: %s", e)

applications = load_applications()  # dict app_id -> application dict

def store_application(chat_id: int, lang: str, answers: list):
    app_id = f"{chat_id}_{int(time.time())}"
    entry = {
        "id": app_id,
        "chat_id": chat_id,
        "lang": lang,
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "answers": answers
    }
    applications[app_id] = entry
    save_applications(applications)
    return app_id

# -------- –£—Ç–∏–ª–∏—Ç—ã --------
def parse_start_param(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ /start ..."""
    if not text:
        return None
    parts = text.split(maxsplit=1)
    param = ""
    if len(parts) > 1:
        param = parts[1].strip().lower()
    # –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "go_uz", "go-uz", "uz", "ru", "start=uz"
    if param.startswith("start="):
        param = param.split("=", 1)[1]
    param = param.replace("-", "_")
    if param.startswith("go_"):
        param = param[3:]
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    if param in ("uz", "uzbek", "o'zbek", "o‚Äòzbek", "oz"):
        return "uz"
    if param in ("ru", "rus", "russian"):
        return "ru"
    return None

def is_valid_phone(s: str) -> bool:
    sdigits = "".join(ch for ch in s if ch.isdigit())
    return len(sdigits) >= 7  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

def safe_send_message(chat_id, text, **kwargs):
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", chat_id, e)

# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------

@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    text = message.text or ""
    lang = parse_start_param(text)
    if lang is None:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        lang = "ru"
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_state[chat_id] = {"lang": lang, "step": 0}
    user_data[chat_id] = []
    log.info("START from %s lang=%s", chat_id, lang)
    safe_send_message(chat_id, QUESTIONS[lang][0])

@bot.message_handler(func=lambda m: m.chat.id in user_state, content_types=['text', 'photo', 'document', 'sticker', 'video', 'audio'])
def handle_steps(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)
    if not state:
        return  # –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å

    lang = state["lang"]
    step = state["step"]
    q_count = len(QUESTIONS[lang])

    # Step 0..3 –æ–∂–∏–¥–∞—é—Ç —Ç–µ–∫—Å—Ç; step 4 (index 4) –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–∏–ø (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
    if step < 4:
        # –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç
        if message.content_type != 'text':
            safe_send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º." if lang == "ru" else "‚ö†Ô∏è Iltimos, javobni matn ko'rinishida yuboring.")
            return
        text = message.text.strip()
        # –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
        if step == 2:  # —Ç–µ–ª–µ—Ñ–æ–Ω
            if not is_valid_phone(text):
                safe_send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä)." if lang == "ru" else "Iltimos, to'g'ri telefon raqamini kiriting (kamida 7 raqam).")
                return
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
        user_data[chat_id].append(text)
        state["step"] += 1
    else:
        # step == 4 ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–∏–ø
        if message.content_type == 'text':
            user_data[chat_id].append({"type": "text", "value": message.text.strip()})
        elif message.content_type == 'photo':
            # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ photo (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
            file_id = message.photo[-1].file_id
            user_data[chat_id].append({"type": "photo", "file_id": file_id})
        elif message.content_type == 'document':
            file_id = message.document.file_id
            user_data[chat_id].append({"type": "document", "file_id": file_id, "file_name": getattr(message.document, 'file_name', None)})
        else:
            # –¥—Ä—É–≥–æ–π —Ç–∏–ø ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
            user_data[chat_id].append({"type": message.content_type, "value": "<non-text data>"})
        state["step"] += 1

    # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if state["step"] < q_count:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        safe_send_message(chat_id, QUESTIONS[lang][state["step"]])
    else:
        # —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        answers = user_data.get(chat_id, [])
        # answers expected: name (0), address (1), phone (2), square (3), comment (4)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        name = answers[0] if len(answers) > 0 else ""
        address = answers[1] if len(answers) > 1 else ""
        phone = answers[2] if len(answers) > 2 else ""
        square = answers[3] if len(answers) > 3 else ""
        comment = answers[4] if len(answers) > 4 else {"type": "text", "value": ""}

        if not address or not phone:
            # –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            if not address:
                state["step"] = 1
                safe_send_message(chat_id, QUESTIONS[lang][1])
                return
            if not phone:
                state["step"] = 2
                safe_send_message(chat_id, QUESTIONS[lang][2])
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ (–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ)
        if lang == "ru":
            app_text = (
                f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
                f"üë§ –ò–º—è: {name}\n"
                f"üè† –ê–¥—Ä–µ—Å: {address}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìê –ö–≤–∞–¥—Ä–∞—Ç–æ–≤: {square}\n"
            )
            # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)
            user_thanks = THANK_YOU["ru"]
        else:
            app_text = (
                f"üì© Yangi ariza\n\n"
                f"üë§ Ism: {name}\n"
                f"üè† Manzil: {address}\n"
                f"üìû Telefon: {phone}\n"
                f"üìê Kvadrat: {square}\n"
            )
            user_thanks = THANK_YOU["uz"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É: –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        try:
            if isinstance(comment, dict) and comment.get("type") == "photo":
                file_id = comment.get("file_id")
                # –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é
                bot.send_photo(GROUP_ID, file_id, caption=app_text)
            elif isinstance(comment, dict) and comment.get("type") == "document":
                file_id = comment.get("file_id")
                fn = comment.get("file_name") or ""
                caption = app_text + ("\n–§–∞–π–ª: " + fn if fn else "")
                bot.send_document(GROUP_ID, file_id, caption=caption)
            else:
                # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                comment_text = comment.get("value") if isinstance(comment, dict) else ""
                full_text = app_text + ("\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment_text if comment_text else "")
                bot.send_message(GROUP_ID, full_text)
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: %s", e)
            # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
            try:
                bot.send_message(GROUP_ID, app_text)
            except Exception:
                log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        store_application(chat_id, lang, [name, address, phone, square, comment if isinstance(comment, dict) else {"type":"text","value":comment}])

        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        safe_send_message(chat_id, user_thanks)

        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state.pop(chat_id, None)
        user_data.pop(chat_id, None)

# -------- Webhook (Flask) --------
@app.route("/webhook", methods=["POST"])
def webhook():
    # –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å)
    raw = request.get_data().decode("utf-8")
    log.debug("WEBHOOK RAW: %s", raw[:1000])  # –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        update = telebot.types.Update.de_json(raw)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ update: %s", e)
        return "bad request", 400
    try:
        bot.process_new_updates([update])
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ process_new_updates: %s", e)
        return "error", 500
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running", 200

if __name__ == "__main__":
    # –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–Ω–µ –Ω–∞ Render) –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–∫:
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))



   

           
        









