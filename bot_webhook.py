# -*- coding: utf-8 -*-
import os
import time
import json
import logging
import sqlite3
from datetime import datetime
from typing import Optional

import telebot
from telebot import types
from flask import Flask, request, abort

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger(__name__)

# -------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render) --------
TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_ID_RAW = os.getenv("GROUP_ID", "-1094323262")  # –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∞—à ID
STORAGE_FILE = os.getenv("APPLICATIONS_FILE", "applications.json")

if not TOKEN:
    log.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    raise SystemExit(1)

try:
    GROUP_ID = int(GROUP_ID_RAW)
except ValueError:
    log.error("GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %s", GROUP_ID_RAW)
    raise SystemExit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite --------
DB_FILE = "bot_database.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_states (
        chat_id INTEGER PRIMARY KEY,
        lang TEXT NOT NULL,
        step INTEGER NOT NULL,
        answers TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS applications (
        id TEXT PRIMARY KEY,
        chat_id INTEGER NOT NULL,
        lang TEXT NOT NULL,
        answers TEXT NOT NULL,
        timestamp TEXT NOT NULL
    )
    ''')
    
    conn.commit()
    conn.close()

def get_user_state(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT lang, step, answers FROM user_states WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        lang, step, answers_json = result
        return {
            "lang": lang,
            "step": step,
            "answers": json.loads(answers_json) if answers_json else []
        }
    return None

def save_user_state(chat_id, lang, step, answers):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    answers_json = json.dumps(answers, ensure_ascii=False)
    
    cursor.execute('''
    INSERT OR REPLACE INTO user_states (chat_id, lang, step, answers)
    VALUES (?, ?, ?, ?)
    ''', (chat_id, lang, step, answers_json))
    
    conn.commit()
    conn.close()

def delete_user_state(chat_id):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM user_states WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# -------- –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã --------
QUESTIONS = {
    "ru": [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º/–∫–≤):",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        "–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤? (–ø—Ä–∏–º–µ—Ä: 120 –∏–ª–∏ 120.5):",
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):"
    ],
    "uz": [
        "Assalomu alaykum! Iltimos, ismingizni kiriting:",
        "Manzilingizni yozing (ko'cha, uy/xona):",
        "Telefon raqamingiz (majburiy):",
        "Necha kvadrat? (masalan: 120 yoki 120.5):",
        "Izohni qoldiring (matn yoki rasm):"
    ]
}

THANK_YOU = {
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º—ã –≤–∞–º —Å–∫–æ—Ä–æ –ø–æ–∑–≤–æ–Ω–∏–º.",
    "uz": "‚úÖ Rahmat! So'rovingiz qabul qilindi, tez orada sizga qo'ng'iroq qilamiz."
}

# -------- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ --------
def store_application(chat_id: int, lang: str, answers: list):
    app_id = f"{chat_id}_{int(time.time())}"
    entry = {
        "id": app_id,
        "chat_id": chat_id,
        "lang": lang,
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "answers": answers
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO applications (id, chat_id, lang, answers, timestamp)
    VALUES (?, ?, ?, ?, ?)
    ''', (app_id, chat_id, lang, json.dumps(answers, ensure_ascii=False), entry['timestamp']))
    conn.commit()
    conn.close()
    
    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
    try:
        if os.path.exists(STORAGE_FILE):
            with open(STORAGE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        data[app_id] = entry
        with open(STORAGE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: %s", e)
    
    return app_id

# -------- –£—Ç–∏–ª–∏—Ç—ã --------
def parse_start_param(text: str) -> Optional[str]:
    if not text:
        return None
    parts = text.split(maxsplit=1)
    if len(parts) > 1:
        param = parts[1].strip().lower()
        if param.startswith("start="):
            param = param.split("=", 1)[1]
        param = param.replace("-", "_")
        if param.startswith("go_"):
            param = param[3:]
        if param in ("uz", "uzbek", "o'zbek", "o‚Äòzbek", "oz"):
            return "uz"
        if param in ("ru", "rus", "russian"):
            return "ru"
    return "ru"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

def is_valid_phone(s: str) -> bool:
    sdigits = "".join(ch for ch in s if ch.isdigit())
    return len(sdigits) >= 7

def safe_send_message(chat_id, text, **kwargs):
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)

# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------
@bot.message_handler(commands=['start', 'get_id'])
def handle_start(message):
    chat_id = message.chat.id
    
    if message.text == '/get_id':
        bot.send_message(chat_id, f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode='Markdown')
        return
        
    text = message.text or ""
    lang = parse_start_param(text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    save_user_state(chat_id, lang, 0, [])
    
    log.info("START from %s lang=%s", chat_id, lang)
    safe_send_message(chat_id, QUESTIONS[lang][0])

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'document'])
def handle_all_messages(message):
    chat_id = message.chat.id
    state = get_user_state(chat_id)
    
    if not state:
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥
        
    lang = state["lang"]
    step = state["step"]
    answers = state["answers"]
    q_count = len(QUESTIONS[lang])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
    if step < 3:  # –ò–º—è, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω
        if message.content_type != 'text':
            safe_send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º." if lang == "ru" else "‚ö†Ô∏è Iltimos, javobni matn ko'rinishida yuboring.")
            return
            
        text = message.text.strip()
        if step == 2 and not is_valid_phone(text):
            safe_send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞." if lang == "ru" else "Iltimos, to'g'ri telefon raqamini kiriting.")
            return
            
        answers.append(text)
        step += 1
        
    elif step == 3:  # –ü–ª–æ—â–∞–¥—å
        if message.content_type != 'text':
            safe_send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —á–∏—Å–ª–æ–º." if lang == "ru" else "‚ö†Ô∏è Iltimos, maydonni raqamda yuboring.")
            return
            
        answers.append(message.text.strip())
        step += 1
        
    elif step == 4:  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if message.content_type == 'text':
            answers.append({"type": "text", "value": message.text.strip()})
        elif message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            answers.append({"type": "photo", "file_id": file_id})
        elif message.content_type == 'document':
            file_id = message.document.file_id
            answers.append({"type": "document", "file_id": file_id})
        else:
            answers.append({"type": message.content_type, "value": "–¥–∞–Ω–Ω—ã–µ"})
        step += 1
        
    else:
        delete_user_state(chat_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(chat_id, lang, step, answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if step < q_count:
        safe_send_message(chat_id, QUESTIONS[lang][step])
    else:
        # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
        name, address, phone, square, comment = answers[0], answers[1], answers[2], answers[3], answers[4]
        
        if lang == "ru":
            app_text = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\nüë§ –ò–º—è: {name}\nüè† –ê–¥—Ä–µ—Å: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìê –ö–≤–∞–¥—Ä–∞—Ç–æ–≤: {square}"
            user_thanks = THANK_YOU["ru"]
        else:
            app_text = f"üì© Yangi ariza\n\nüë§ Ism: {name}\nüè† Manzil: {address}\nüìû Telefon: {phone}\nüìê Kvadrat: {square}"
            user_thanks = THANK_YOU["uz"]
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        try:
            if isinstance(comment, dict) and comment.get("type") == "photo":
                bot.send_photo(GROUP_ID, comment["file_id"], caption=app_text)
            elif isinstance(comment, dict) and comment.get("type") == "document":
                bot.send_document(GROUP_ID, comment["file_id"], caption=app_text)
            else:
                comment_text = comment.get("value", "") if isinstance(comment, dict) else str(comment)
                full_text = app_text + f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}" if lang == "ru" else f"\nüí¨ Izoh: {comment_text}"
                bot.send_message(GROUP_ID, full_text)
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: %s", e)
            bot.send_message(GROUP_ID, app_text)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—á–∏—â–∞–µ–º
        store_application(chat_id, lang, answers)
        safe_send_message(chat_id, user_thanks)
        delete_user_state(chat_id)

# -------- Webhook --------
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    abort(403)

@app.route("/", methods=["GET"])
def index():
    return "Bot is running. Webhook: /webhook", 200

if __name__ == "__main__":
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url="https://zuhfacadebot-1.onrender.com/webhook")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
