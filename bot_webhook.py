# -*- coding: utf-8 -*-
import os
import json
import logging
import telebot
from flask import Flask, request

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (ENV) ==========
BOT_TOKEN = os.getenv("BOT_TOKEN", "7592969962:AAE93nt3NRENC9LCxfomvONl7zqozS2SZh8")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "-4878488268"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://zuhfacadebot-1.onrender.com/webhook")
PORT = int(os.getenv("PORT", 10000))

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==========
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
app = Flask(__name__)

SESSIONS_FILE = "sessions.json"        # –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ / –ø—Ä–æ–≥—Ä–µ—Å—Å
APPLICATIONS_FILE = "applications.json"  # –≤—Å–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏

# –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
def load_sessions():
    try:
        if os.path.exists(SESSIONS_FILE):
            with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logger.exception("load_sessions failed: %s", e)
    return {}

def save_sessions(sessions):
    try:
        with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(sessions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.exception("save_sessions failed: %s", e)

def append_application(app):
    try:
        apps = []
        if os.path.exists(APPLICATIONS_FILE):
            with open(APPLICATIONS_FILE, "r", encoding="utf-8") as f:
                apps = json.load(f)
        apps.append(app)
        with open(APPLICATIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(apps, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.exception("append_application failed: %s", e)

# –°–µ—Å—Å–∏–∏: –∫–ª—é—á–∏ ‚Äî —Å—Ç—Ä–æ–∫–∏ chat_id
sessions = load_sessions()

# ========== –¢–µ–∫—Å—Ç—ã (–≤–µ–∂–ª–∏–≤–æ) ==========
TEXTS = {
    "ru": {
        "ask_name": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
        "ask_phone": "–°–ø–∞—Å–∏–±–æ! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        "ask_address": "–û—Ç–ª–∏—á–Ω–æ. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞.",
        "ask_area": "–•–æ—Ä–æ—à–æ. –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ (–≤ –º¬≤), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
        "ask_comment": "–°–ø–∞—Å–∏–±–æ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.",
        "ask_photo": "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ (—ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        "done": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
    },
    "uz": {
        "ask_name": "üëã Assalomu alaykum! Iltimos, ismingizni kiriting.",
        "ask_phone": "Rahmat! Iltimos, telefon raqamingizni yozing.",
        "ask_address": "Zo'r. Iltimos, ob‚Äôekt manzilini kiriting.",
        "ask_area": "Maydonni (m¬≤) taxminiy yozing, iltimos.",
        "ask_comment": "Rahmat ‚Äî izoh yoki istaklaringizni yozing.",
        "ask_photo": "Agar hohlasangiz, ob‚Äôekt rasmini yuboring (ixtiyoriy). Yoki ¬´o‚Äòtkazib yuborish¬ª deb yozing.",
        "done": "‚úÖ Rahmat! So‚Äòrovingiz qabul qilindi. Tez orada siz bilan bog‚Äòlanamiz.",
    }
}

# –ø–æ—Ä—è–¥–æ–∫ —à–∞–≥–æ–≤
STEPS = ["name", "phone", "address", "area", "comment", "photo"]

# ========= –•—ç–Ω–¥–ª–µ—Ä—ã ==========
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = str(message.chat.id)
    text = (message.text or "").strip()
    # deep-link: /start uz  –∏–ª–∏ /start ru
    lang = "ru"
    parts = text.split()
    if len(parts) > 1 and parts[1].lower() in ("uz", "ru"):
        lang = parts[1].lower()
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    sessions[chat_id] = {
        "step": "name",
        "lang": lang,
        "data": {},
        "photos": []  # —Å–ø–∏—Å–æ–∫ file_id
    }
    save_sessions(sessions)
    bot.send_message(int(chat_id), TEXTS[lang]["ask_name"])

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'document'])
def handle_all(message):
    chat_id = str(message.chat.id)
    if chat_id not in sessions:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É.")
        return

    session = sessions[chat_id]
    step = session.get("step")
    lang = session.get("lang", "ru")

    # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ –∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ ‚Äî photo, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    if message.content_type == "photo":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        session.setdefault("photos", []).append(file_id)
        # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —à–∞–≥ photo ‚Äî —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if step == "photo":
            # finalize
            finalize_application(chat_id)
            return
        else:
            # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
            bot.send_message(message.chat.id, TEXTS[lang]["ask_" + step])
            save_sessions(sessions)
            return

    if message.content_type == "document":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ file_id
        file_id = message.document.file_id
        session.setdefault("photos", []).append({"doc": file_id})
        if step == "photo":
            finalize_application(chat_id)
            return
        else:
            bot.send_message(message.chat.id, TEXTS[lang]["ask_" + step])
            save_sessions(sessions)
            return

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã:
    text = (message.text or "").strip()

    # –µ—Å–ª–∏ –Ω–∞ —à–∞–≥–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" / "o‚Äòtkazib" ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–æ–º
    if step == "photo" and text.lower() in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏", "skip", "o'tkazib", "o‚Äòtkazib", "o' tkazib", "o`tkazib"):
        finalize_application(chat_id)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
    session["data"][step] = text
    # –¥–≤–∏–≥–∞–µ–º —à–∞–≥
    try:
        idx = STEPS.index(step)
    except ValueError:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        session["step"] = "name"
        save_sessions(sessions)
        bot.send_message(message.chat.id, TEXTS[lang]["ask_name"])
        return

    # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ —Ñ–∏–Ω–∞–ª
    if idx + 1 < len(STEPS):
        next_step = STEPS[idx + 1]
        session["step"] = next_step
        save_sessions(sessions)
        # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî photo, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, TEXTS[lang].get(f"ask_{next_step}", TEXTS[lang]["ask_comment"]))
    else:
        # –≤—Å–µ –ø–æ–ª—è —Å–æ–±—Ä–∞–Ω—ã ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        finalize_application(chat_id)

def finalize_application(chat_id_str):
    session = sessions.get(chat_id_str)
    if not session:
        return
    lang = session.get("lang", "ru")
    data = session.get("data", {})
    photos = session.get("photos", [])

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –ø–æ —è–∑—ã–∫—É
    if lang == "uz":
        app_text = (
            f"üì© Yangi so‚Äòrov:\n\n"
            f"üë§ Ism: {data.get('name','')}\n"
            f"üìû Telefon raqami: {data.get('phone','')}\n"
            f"üìç Manzil: {data.get('address','')}\n"
            f"üìê Maydon: {data.get('area','')} m¬≤\n"
            f"üí¨ Izoh: {data.get('comment','')}"
        )
    else:
        app_text = (
            f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
            f"üë§ –ò–º—è: {data.get('name','')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data.get('address','')}\n"
            f"üìê –ö–≤–∞–¥—Ä–∞—Ç—É—Ä–∞: {data.get('area','')} –º¬≤\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment','')}"
        )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    try:
        bot.send_message(GROUP_CHAT_ID, app_text)
        # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        for p in photos:
            try:
                if isinstance(p, dict) and p.get("doc"):
                    bot.send_document(GROUP_CHAT_ID, p["doc"])
                else:
                    bot.send_photo(GROUP_CHAT_ID, p)
            except Exception:
                logger.exception("Failed to forward media to group")
    except Exception:
        logger.exception("Failed to send application to group")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
    app_record = {
        "chat_id": int(chat_id_str),
        "lang": lang,
        "data": data,
        "photos": photos
    }
    append_application(app_record)

    # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(int(chat_id_str), TEXTS[lang]["done"])
    except Exception:
        logger.exception("Failed to send confirmation to user")

    # —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    sessions.pop(chat_id_str, None)
    save_sessions(sessions)

# ========== Flask endpoints ==========
@app.route('/', methods=['GET'])
def index():
    return "Bot is running!", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception:
        logger.exception("Webhook processing error")
    return "OK", 200

# –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ç–∞–≤–∏–º webhook
with app.app_context():
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        logger.info("Webhook set to %s", WEBHOOK_URL)
    except Exception:
        logger.exception("Failed to set webhook")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
