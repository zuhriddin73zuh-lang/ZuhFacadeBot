# bot_webhook.py
import os
import json
import logging
import threading
from flask import Flask, request
import telebot
from telebot import types

# ========== –ù–ê–°–¢–†–û–ô–ö–ò: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ =============
TOKEN = os.environ.get("TOKEN") or "YOUR_TOKEN_HERE"
GROUP_ID = int(os.environ.get("GROUP_ID") or "YOUR_GROUP_ID_HERE")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -4878488268
USER_DATA_FILE = "user_data.json"
PORT = int(os.environ.get("PORT", 5000))
# ====================================================

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

QUESTIONS = {
    "ru": [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "–ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç—É—Ä–∞ (–º¬≤):",
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–º–∞:"
    ],
    "uz": [
        "Assalomu alaykum! Iltimos, ismingizni kiriting:",
        "Obekt manzilini yozing:",
        "Telefon raqamingiz:",
        "Taxminiy maydon (m¬≤):",
        "Izoh yoki uy rasmini yuboring:"
    ]
}

THANK_YOU = {
    "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    "uz": "‚úÖ Rahmat! So'rovingiz qabul qilindi. Tez orada siz bilan bog'lanamiz."
}

# –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
file_lock = threading.Lock()
user_data = {}

def load_user_data():
    global user_data
    if os.path.exists(USER_DATA_FILE):
        try:
            with file_lock, open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            # –∫–ª—é—á–∏ –≤ JSON –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∞–º–∏, –ø—Ä–∏–≤–µ–¥—ë–º –∫ int
            user_data = {int(k): v for k, v in data.items()}
            logger.info("Loaded user_data from file")
        except Exception as e:
            logger.exception("Failed to load user_data: %s", e)
            user_data = {}
    else:
        user_data = {}

def save_user_data():
    try:
        with file_lock, open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            # –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è JSON
            json.dump({str(k): v for k, v in user_data.items()}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.exception("Failed to save user_data: %s", e)

load_user_data()

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def detect_lang_from_start_text(text, from_user_langcode):
    if not text:
        text = ""
    parts = text.strip().split()
    if len(parts) > 1:
        payload = parts[1].lower()
        if payload.startswith("uz"):
            return "uz"
        if payload.startswith("ru"):
            return "ru"
    # fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º language_code –æ—Ç Telegram
    if from_user_langcode:
        lc = from_user_langcode.lower()
        if lc.startswith("uz"):
            return "uz"
        if lc.startswith("ru"):
            return "ru"
    return None

def set_user_start(chat_id, lang):
    user_data[chat_id] = {"lang": lang, "step": 0, "answers": []}
    save_user_data()

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@bot.message_handler(commands=["start"])
def handle_start(message):
    try:
        chat_id = message.chat.id
        logger.info("Start from %s text=%s language_code=%s", chat_id, message.text, message.from_user.language_code)
        lang = detect_lang_from_start_text(message.text, message.from_user.language_code)
        if lang:
            set_user_start(chat_id, lang)
            bot.send_message(chat_id, QUESTIONS[lang][0])
            return
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±–æ—Ä (one_time_keyboard)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("RU", "UZ")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=markup)
    except Exception as e:
        logger.exception("Error in handle_start: %s", e)

@bot.message_handler(func=lambda m: isinstance(m.text, str) and m.text.strip().upper() in ["RU", "UZ", "–†–£–°", "UZB"])
def choose_lang_keyboard(message):
    try:
        chat_id = message.chat.id
        # –µ—Å–ª–∏ —É–∂–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–∫ —è–∑—ã–∫–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        if chat_id in user_data and user_data[chat_id].get("step", 0) > 0:
            return
        txt = message.text.strip().upper()
        lang = "uz" if txt.startswith("U") else "ru"
        set_user_start(chat_id, lang)
        bot.send_message(chat_id, QUESTIONS[lang][0], reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logger.exception("Error in choose_lang_keyboard: %s", e)

@bot.message_handler(content_types=['text', 'photo', 'document'])
def handle_all_messages(message):
    try:
        chat_id = message.chat.id
        if chat_id not in user_data:
            bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–∫–∏")
            return

        user = user_data[chat_id]
        lang = user["lang"]
        step = user["step"]

        # —Å–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª)
        if message.content_type == "text":
            answer = message.text
        elif message.content_type == "photo":
            # –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
            file_id = message.photo[-1].file_id
            answer = {"type": "photo", "file_id": file_id}
        elif message.content_type == "document":
            answer = {"type": "document", "file_id": message.document.file_id, "file_name": message.document.file_name}
        else:
            answer = str(message.content_type)

        user["answers"].append(answer)
        user["step"] = step + 1
        save_user_data()

        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–Ω–∞–ª
        if user["step"] < len(QUESTIONS[lang]):
            bot.send_message(chat_id, QUESTIONS[lang][user["step"]])
            return

        # —Ñ–∏–Ω–∞–ª: —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        answers = user["answers"]
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        def text_or_empty(i):
            return answers[i] if i < len(answers) and isinstance(answers[i], str) else ""

        name = text_or_empty(0)
        address = text_or_empty(1)
        phone = text_or_empty(2)
        square = text_or_empty(3)
        comment = text_or_empty(4)

        if lang == "ru":
            text = f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\nüë§ –ò–º—è: {name}\nüè† –ê–¥—Ä–µ—Å: {address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìê –ö–≤–∞–¥—Ä–∞—Ç—É—Ä–∞: {square}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            thank = THANK_YOU["ru"]
        else:
            text = f"üìã Yangi ariza\n\nüë§ Ism: {name}\nüè† Manzil: {address}\nüìû Telefon: {phone}\nüìê Maydon: {square}\nüí¨ Izoh: {comment}"
            thank = THANK_YOU["uz"]

        bot.send_message(GROUP_ID, text)

        # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –±—ã–ª–∏)
        for ans in answers:
            if isinstance(ans, dict) and ans.get("type") == "photo":
                try:
                    bot.send_photo(GROUP_ID, ans["file_id"])
                except Exception:
                    logger.exception("Failed to forward photo")
            if isinstance(ans, dict) and ans.get("type") == "document":
                try:
                    bot.send_document(GROUP_ID, ans["file_id"])
                except Exception:
                    logger.exception("Failed to forward document")

        bot.send_message(chat_id, thank)
        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        del user_data[chat_id]
        save_user_data()

    except Exception as e:
        logger.exception("Error in handle_all_messages: %s", e)
        try:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        except Exception:
            pass

# ---------- webhook endpoint ----------
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_data = request.get_json(force=True)
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        logger.exception("Webhook processing failed: %s", e)
        return "Error", 500

@app.route("/")
def index():
    return "‚úÖ Bot is running!"

if __name__ == "__main__":
    logger.info("Starting Flask app on port %s", PORT)
    app.run(host="0.0.0.0", port=PORT)






